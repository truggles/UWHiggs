##################################################################################
Information on branch tags
##################################################################################
tag name               |                  comment
----------------------------------------------------------------------------------
 moriond13             | SM event categorization as used for Moriond13 
                       | (auxiliaries/datacards V00-02-02)


##################################################################################
README for Datacard Creation with MakeDatacard.py and MakerUtilsL.py (MitLimits/Higgs2Tau)
##################################################################################

Steps:

1) Run the following: "datacard-project.py some_directory_name_here".  This creates a directory with the requisite configuration files. Enter this directory
2) Edit cgs.conf: Specify the categories to be used in the datacard. Specify signal, background, and data samples
3) Edit unc.conf: Specify the names and types of uncertainty parameters to be used in the analysis
4) Edit unc.vals: Specify the values of the uncertainty parameter by category and sample name.
5) Copy input ROOT file into the project directory.
6) Create the datacard with the following line:
   "create-datacard.py -i your_input_root_file -o your_output_datacard -c cgs.config -u unc.vals -d unc.config 120"

#################################################################################
File system overview:
#################################################################################
Presented below are complete descriptions of how to edit the three configuration files to produce the desired datacard.
1) cgs.conf
2) unc.conf
3) unc.vals

A ten-line example is commented out at the top of each of these files. The system should be relatively straightforward to understand.


############################################################################
cgs.config: Specification of groups, categories, and samples
#############################################################################

# Groups
In the first section of this file, specify groups of samples. At a minimum, the user must specify signal and background groups.
Groups are specified as follows:
$ GROUP group_name sample_1, sample_2, sample_3, sample_4
This creates a group of samples named group_name with samples sample_1, sample_2, sample_3, and sample_4
Here is a practical example:

$ GROUP signal VH, ggH, qqH
$ GROUP background Ztt, ttbar, EWK, Fakes

# Categories, signals, backgrounds, and data samples
In the second part of the file, the user specifies categories (directories in the input ROOT file), signals (a signal group), backgrounds (a background group), and data (a data sample).

Categories are specified with a line of the following form:
categories: category_a, category_b, category_c
The line must begin with "categories:"
Example:
categories: emu_vbf, emu_novbf

Signals are specified with a line of the following form:
signals: signal_group_name
signal_group_name must be a valid group name from the groups specified in the first part of the file

Backgrounds are specified with a line of the following form:
backgrounds: background_group_name
background_group_name must be a valid group name from the groups specified in the first part of the file.

Data are specified with a line of the following form:
data: data_sample_name
data_sample_name must be the name of the input histogram within the appropriate category name.

# Example
Suppose my ROOT file has the following directories:
emu_vbf, emu_novbf, emu_b, emu_nob

Each directory has the following histograms:
Higgs_vtth_sm_120, Higgs_gf_sm_120, Higgs_vbf_sm_120, Ztt, ttbar, EWK, Fakes, data_obs

I'm doing a standard model search, so I want to use the emu_vbf and emu_novbf categories.
Then, my file should look like:

$ GROUP signal VH, ggH ,qqH
$ GROUP background Ztt, ttbar, EWK, Fakes
categories: emu_vbf, emu_novbf
signals: signal
backgrounds: background
data: data_obs

############################################################################
unc.config: Specification of uncertainty parameter names and types
############################################################################

For parameters of type lnN or shape, each line should adhere to the following format:
uncertainty_name      uncertainty_type

For parameters of type gmN, each line should adhere to the following format:
uncertainty_name      uncertainty_type    sideband_events

The sideband_events parameter only applies to gmN. The extrapolation factor (what will be entered into the datacard)
is the rate of the relevant process (specify relevant processes for the uncertainty in unc.vals) divided by the number of
events in the sideband.

# Examples
lumi                    lnN
some_sb_parameter       gmN 1000
some_shape_parameter    shape

In this case, there are 1000 events in the sideband.

###########################################################################
unc.vals: specification of uncertainty values by category, sample, and uncertainty name
###########################################################################
NOTE: It is not necessary to specify uncertainty values that do not apply to a certain category and sample.

# lnN and shape uncertainty values

Uncertainty values are specified in the following format:
category_i,category_j		sample_a,group_b        parameter_name  parameter_value
parameter_value is then the value of the uncertainty named parameter_name for sample_a and all samples in group_b for categories i and j.

Consider the following example:
emu_vbf,emu_novbf,emu_boost     signal                  lumi            1.045
An uncertainty of 1.045 will be specified for the parameter lumi for all samples in the group signal for the categories emu_vbf,emu_novbf,emu_boost.

Suppose this uncertainty also applies to the electroweak sample, EWK, in all categories. Then I can modify the line as follows:
emu_vbf,emu_novbf,emu_boost     signal,EWK              lumi            1.045

What if I have a parameter, CMS_eff_b (b-tagging efficiency uncertainty), that applies to all samples but is different in each category?
emu_b		          signal,background       CMS_eff_b       1.05
emu_nob			  signal,background	  CMS_eff_b	  0.99

Lastly, what if there was a parameter that had different values for different samples within the same category?
emu_b				ttbar			CMS_mis_b	1.03
emu_b				Ztt			CMS_mis_b 	1.01

# gmN uncertainty values

Values are calculated automatically from the histogram integral and the sideband event count (sideband event count specified in unc.config)
Use the same format as with the lnN and shape uncertainty values to indicate the categories and samples to which the uncertainty should be applied
Use a placeholder value or leave out the value, as below.

unc.vals:
eleTau_SM0                      W                       CMS_eleTau_SM0_WNorm

In this case, we have already specified in the unc.config file:
unc.config:
CMS_eleTau_SM0_WNorm	gmN	1000

#######################################################################
End of file overview
#######################################################################
